<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd 
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd 
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop.xsd 
       http://www.springframework.org/schema/mvc 
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/cache 
       http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
       ">
       
       
       <!-- 1.引入属性文件 -->
       <context:property-placeholder location="classpath:/datasource.properties"/>
       
       
       <!-- 2.配置数据源 -->
	    <bean id="dataSource"
	          class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	        <property name="url">
	            <value>${jdbc.dbcp.fh.url}</value>
	        </property>
	        <property name="driverClassName">
	            <value>${jdbc.driverClassName}</value>
	        </property>
	        <property name="username">
	            <value>${jdbc.username}</value>
	        </property>
	        <property name="password"> 
	            <value>${jdbc.password}</value> 
 	        </property>
	        <!-- 连接池中的最大的连接数 -->
	        <property name="maxActive">
	            <value>${jdbc.maxActive}</value>
	        </property>
	        <!-- 最大等待的时间 (单位:毫秒) -->
	        <property name="maxWait">
	            <value>${jdbc.maxWait}</value>
	        </property>
	    </bean>
       
       
        <!--3.生成sqlsession -->
	    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
	        <property name="dataSource" ref="dataSource" />
	        <!-- 为 com.jk.model所有的实体bean自动创建别名。Book:book  UserInfo:userInfo-->
			<property name="typeAliasesPackage" value="com.fh.shop.admin.po"></property>
	        <!--  自动查找mybatis的xml配置文件，省掉sqlMapConfig.xml里的mappers手工配置 -->
	        <property name="mapperLocations" value="classpath:mappers/*.xml" />
	    </bean>
	    
	    
	    <!-- 4.通过 MapperScannerConfigurer自动扫描指定basePackage中的所有的接口，并且
		  把sqlSession与接口结合（扫描dao层）-->
	    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	        <property name="basePackage" value="com.fh.shop.admin.mapper" />
	        <property name="sqlSessionFactoryBeanName" value="sqlSession" />
	    </bean>
    
    	<!-- 5.扫描service层  使其注解生效 -->
    	<context:component-scan base-package="com.fh.shop.admin.biz"/>
    
    
    	<!-- (事务管理) -->  
	    <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
	        <property name="dataSource" ref="dataSource" />  
	    </bean>  
		
		<!-- 定义advice,配置传播特性、事务隔离级别、只读事务、回滚策略 -->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
				<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
				<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
				<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
				<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
				<tx:method name="*" propagation="REQUIRED" read-only="true"/>
			</tx:attributes>
		</tx:advice>
		
		<!-- 配置 Spring 的声明式事务 -->
		<!-- 定义那些类使用事务 -->
		<aop:config>
			<aop:advisor pointcut="execution(* com.fh.shop.admin.biz..*.*(..))" advice-ref="txAdvice"/>
		</aop:config>
    
    	
    	
</beans>